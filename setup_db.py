import sqlite3
import json
import os.path
from dbutils.db_config import db_exists, create_db, Table
from hackrtrackr import settings

historic_data = os.path.join(settings.BASE_DIR, 'dbutils', 'data', 'comments_db_final.json')
company_data = os.path.join(settings.BASE_DIR, 'dbutils', 'data', 'company_db_final.json')
id_geocode_data = os.path.join(settings.BASE_DIR, 'dbutils', 'data', 'id_geocode_db_final.json')
    
posts_table_properties = [('comment_date', "DATE"), ('company', 'TEXT'), ('glassdoor_id', 'TEXT'), ('id', "INTEGER"), ('text', "TEXT"), ('thread_date', "DATE"), ('thread_id', "INTEGER")]
#company_table_properties = [('con_review', 'TEXT'), ('id', 'INTEGER'), ('industry', 'TEXT'), ('name', "TEXT"), ('numberOfRatings', 'TEXT'), ('overallRating', 'INTEGER'), ('pro_review', 'TEXT'), ('squareLogo', 'INTEGER'), ('website', 'TEXT')]
company_table_properties = [('id', 'INTEGER'), ('industry', 'TEXT'), ('name', "TEXT"), ('numberOfRatings', 'TEXT'), ('overallRating', 'INTEGER'), ('squareLogo', 'INTEGER'), ('website', 'TEXT')]
id_geocode_table_properties = [('city', 'TEXT'), ('country', 'TEXT'), ('id', 'INTEGER'), ('lat', 'FLOAT'), ('lng', 'FLOAT'), ('state', 'TEXT')]

db_bool = db_exists()

#create the tables by invoking Table class
posts = Table("posts", posts_table_properties, historic_data)
company = Table("company", company_table_properties, company_data)
id_geocode = Table("id_geocode", id_geocode_table_properties, id_geocode_data)

#see if the db already exists
if db_bool == False:
    create_db(historic_data, posts, company, id_geocode)
else:
    print("DB already exists")

# update_table(table, data, setup = False, conn = None)


"""
1) Historic comments.json file that will initialize the db upon first website deploymet
2) Updates - periodic API calls to HackerNews
    2.1) API call generates the current and previous months' job postings
    2.2) Parse through the json data generated by step 2.1 and determine which posts are not in DB
    2.3) Update filtered data from step 2.2 with company and location info
    2.4) Write filtered data from step 2.3 to the DB
"""